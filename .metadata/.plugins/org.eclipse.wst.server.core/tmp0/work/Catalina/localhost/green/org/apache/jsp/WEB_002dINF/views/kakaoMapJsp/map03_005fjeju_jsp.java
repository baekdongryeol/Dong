/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2022-01-10 05:27:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.kakaoMapJsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map03_005fjeju_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/D:/MTest/MyWork/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring02/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/MTest/MyWork/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring02/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1640065543731L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>** kakaoMap03 _ 여러위치 Marking & 설명 **</title>\r\n");
      out.write("<script src=\"resources/myLib/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" \r\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=dd110a227c3d8de36931003064d64525&libraries=services\">\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>** Map Test03 : 좌표로 위치와 설명 표시 **</h2>\r\n");
      out.write("<br><hr>\r\n");
      out.write("<div id=\"map\" style=\"width:90%;height:400px;\"></div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// 이 스크립트는 BODY 영역에 작성 한다. \r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 복수개의 마커 와 설명(info)를 위한 Data\r\n");
      out.write("var positions = [\r\n");
      out.write("\t\t{ content:'<div>카카오</div>',  // 마커 롤오버시 표시할 내용\r\n");
      out.write("\t\t  latlng:new kakao.maps.LatLng(33.450705, 126.570677) },\r\n");
      out.write("\t\t{ content:'<div>생태연못</div>',\r\n");
      out.write("\t\t  latlng:new kakao.maps.LatLng(33.450936, 126.569477) },  \r\n");
      out.write("\t\t{ content:'<div>텃밭</div>',\r\n");
      out.write("\t\t  latlng:new kakao.maps.LatLng(33.450879, 126.569940) },\r\n");
      out.write("\t\t{ content:'<div>근린공원</div>',\r\n");
      out.write("\t\t  latlng:new kakao.maps.LatLng(33.451393, 126.570738) },  \r\n");
      out.write("\t];\r\n");
      out.write("\r\n");
      out.write("// alert('positions.length='+positions.length) ;\r\n");
      out.write("\r\n");
      out.write("//마커 이미지의 이미지 주소입니다\r\n");
      out.write("var imageSrc = \"http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; \r\n");
      out.write("\r\n");
      out.write("// infoTest 2) 마커에 표시할 인포윈도우 생성 \r\n");
      out.write("var infowindow = new kakao.maps.InfoWindow({ zIndex:1 });  \r\n");
      out.write("\r\n");
      out.write("// 지도의 중심좌표를 표시 위치에 따라 재설정 하기위해 추가\t\r\n");
      out.write("var bounds = new kakao.maps.LatLngBounds();\t\r\n");
      out.write("\r\n");
      out.write("for (var i=0;i<positions.length;i++) {\r\n");
      out.write("\t\r\n");
      out.write("\t// 마커 이미지의 이미지 크기 입니다\r\n");
      out.write("    var imageSize = new kakao.maps.Size(24, 35); \r\n");
      out.write(" \t// 마커 이미지를 생성합니다    \r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 마커를 생성\t\r\n");
      out.write("\tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t\t\tmap: map, //마커를 표시할 지도\r\n");
      out.write("\t\t\t\t\tposition: positions[i].latlng, //마커위치\r\n");
      out.write("\t\t\t\t\ttitle : positions[i].content, \r\n");
      out.write("\t\t\t\t\t// 마커에 마우스를 올리면 타이틀이 표시됨 -> 그러나 html 적용안됨\r\n");
      out.write("\t\t\t        image : markerImage // 마커 이미지 \r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t// marker 에 이벤트 등록\r\n");
      out.write("\t//alert('i='+i+' , content='+positions[i].content) ;\r\n");
      out.write("\t\r\n");
      out.write("\t/* // infoTest 1) 무조건 표시 : 마커에 표시할 인포윈도우 생성   \r\n");
      out.write("   \tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t    \t        content: positions[i].content // 인포윈도우에 표시할 내용 : html 적용됨\r\n");
      out.write("\t\t    \t    }); \r\n");
      out.write("   \tinfowindow.open(map,marker); */\r\n");
      out.write("\t\r\n");
      out.write(" \t// infoTest 2) 마커에 mouseover, mouseout 이벤트 적용  \r\n");
      out.write("  \t// => 이벤트 리스너로는 mouseover: Opener 와  mouseout: Closer 를 만들어 등록 \r\n");
      out.write("    var infoContent=positions[i].content ;\r\n");
      out.write("  \tkakao.maps.event.addListener(marker,'mouseover',makeOverListener(map,marker,infowindow,infoContent));\r\n");
      out.write("  \tkakao.maps.event.addListener(marker,'mouseout',makeOutListener(infowindow));\r\n");
      out.write("\t\r\n");
      out.write("  \t// 인수로 주어진 좌표를 포함하도록 영역 정보를 확장한다.\r\n");
      out.write("\tbounds.extend(positions[i].latlng);\r\n");
      out.write("  \t// bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("\r\n");
      out.write("}// for\r\n");
      out.write("\r\n");
      out.write("//지도의 중심좌표를 표시 장소를 기준으로 재설정\t\r\n");
      out.write("map.setBounds(bounds);\r\n");
      out.write("\r\n");
      out.write("// 인포윈도우를 표시하는 함수\r\n");
      out.write("function makeOverListener(map,marker,infowindow,infoContent) {\r\n");
      out.write("\treturn function() {\r\n");
      out.write("\t\t// 이때 infowindow 는 상단에 전역으로 정의 해 놓음\r\n");
      out.write("\t\tinfowindow.setContent(infoContent);\r\n");
      out.write("\t\tinfowindow.open(map,marker);\r\n");
      out.write("\t};\r\n");
      out.write("} // makeOverListener \t\r\n");
      out.write(" \r\n");
      out.write("//인포윈도우를 닫는 함수\r\n");
      out.write("function makeOutListener(infowindow) {\r\n");
      out.write("\treturn function() {\r\n");
      out.write("\t\tinfowindow.close();\r\n");
      out.write("\t};\r\n");
      out.write("} // makeOverListener \t\r\n");
      out.write("\r\n");
      out.write("</script> \r\n");
      out.write("<br><hr><br>\r\n");
      out.write("<a href=\"home\">[HOME]</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
