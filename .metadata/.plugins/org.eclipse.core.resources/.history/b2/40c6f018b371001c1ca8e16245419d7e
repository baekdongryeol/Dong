package com.ncs.green;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import criTest.PageMaker;
import criTest.SearchCriteria;
import service.MemberService;
import vo.MemberVO;
import vo.PageVO;

@Controller
public class MemberController2 {
	
	@Autowired  // -> MemberService 는 반드시 생성되어있어야 함
	MemberService service ;
	@Autowired
	PasswordEncoder passwordEncoder ;
	// PasswordEncoder interface 구현 클래스
	// => Pbkdf2PasswordEncoder, BCryptPasswordEncoder, 
	//    SCryptPasswordEncoder, StandardPasswordEncoder, 
	//    NoOpPasswordEncoder
	// => 대표적인 BCryptPasswordEncoder root-context.xml 또는 servlet-context.xml 에 bean 설정
	
	
	// ** Member Check List ******************************
	@RequestMapping(value = "/mchecklist")
	public ModelAndView mchecklist(ModelAndView mv, MemberVO vo) {
		
		// 1) Check_Box 처리
		// String[] check = request.getParameterValues("check");
		// => vo 에 배열 Type의 check 컬럼을 추가하면 편리
		
		// 2) Service 실행
		// => 선택하지 않은경우 : selectList() 
		// => 선택을 한 경우 : 조건별 검색 checkList(vo) -> 추가
		List<MemberVO> list = null;
		
		//if ( vo.getCheck() != null && vo.getCheck().length > 0 ) {...}
		// => 배열Type의 경우 선택하지 않으면 check=null 이므로 길이 비교 필요없음. 
		if ( vo.getCheck() != null ) list = service.checkList(vo) ;
		else list = service.selectList();
		
		// => Mapper 는 null 을 return 하지 않으므로 길이로 확인 
		if ( list != null && list.size()>0 ) mv.addObject("banana", list);
		else mv.addObject("message", "~~ 출력할 자료가 1건도 없습니다 ~~");
		
		mv.setViewName("member/mCheckList");
		return mv;
	} //mchecklist
	
	
	// ** Ajax MemberList ******************************
	@RequestMapping(value = "/axmlist")
	public ModelAndView axmlist(ModelAndView mv) {
		List<MemberVO> list = service.selectList();
		if (list != null) mv.addObject("banana", list);
		else mv.addObject("message", "~~ 출력할 자료가 1건도 없습니다 ~~");
		mv.setViewName("axTest/axMemberList");
		return mv;
	} //axmlist
	
	// ** Image Download
	@RequestMapping(value = "/dnload")
	public ModelAndView dnload(HttpServletRequest request, ModelAndView mv,
			@RequestParam("dnfile") String dnfile ) {
			// String dnfile = request.getParameter("dnfile"); 와 동일구문
		
		// ** real 저장위치 확인 -> 해당화일 선택 -> response 처리
		// 1) real 저장위치 확인
		// => 개발중인지, 배포후인지 확인
		String realPath = request.getRealPath("/"); //deprecated Method
		String fileName = dnfile.substring(dnfile.lastIndexOf("/")+1);
		if (realPath.contains(".eclipse."))
			 realPath = "D:/MTest/MyWork/Spring02/src/main/webapp/resources/uploadImage/"
					 	+ fileName ;
		else realPath += "resources\\uploadImage\\" + fileName;
		File file = new File(realPath) ;
		
		mv.addObject("downloadFile", file);
		mv.setViewName("download");
		// ** 일반적인 경우 ~/views/download.jsp 를 찾음, 그러나 이 경우에는 아님
		// => servlet-context.xml 에 설정하는 view 클래스 (DownloadView.java) 의
		// id 와 동일 해야함.
		return mv;
	} //dnload
	// ** 위 addOb.. , setView.., return..  3 구문은 아래처럼 작성도 가능.
	// => return new ModelAndView("download", "downloadFile", file);
	// => 생성자 참고 
	//    public ModelAndView(View view, String modelName, 
	//     				Object modelObject) { 
	//     		this.view = view; addObject(modelName, modelObject); }
	
	// ** Json MemberDelete *******************************
	@RequestMapping(value = "/jsdelete")
	public ModelAndView jsdelete(ModelAndView mv, MemberVO vo) {
		if (service.delete(vo) > 0) 
			 mv.addObject("success", "T");
		else mv.addObject("success", "F");
		mv.setViewName("jsonView");
		return mv;
	} //jsdelete
	
	// ** JSON Login 
	// *** JSON : 제이슨, JavaScript Object Notation
	// 자바스크립트의 객체 표기법으로, 데이터를 전달 할 때 사용하는 표준형식.
	// 속성(key) 과 값(value) 이 하나의 쌍을 이룸
			
	// ** JAVA의 Data 객체 -> JSON 변환하기
	// 1) GSON
	// : 자바 객체의 직렬화/역직렬화를 도와주는 라이브러리 (구글에서 만듦)
	// 즉, JAVA객체 -> JSON 또는 JSON -> JAVA객체
			
	// 2) @ResponseBody (매핑 메서드에 적용)
	// : 메서드의 리턴값이 View 를 통해 출력되지 않고 HTTP Response Body 에 직접 쓰여지게 됨.
	// 이때 쓰여지기전, 리턴되는 데이터 타입에 따라 종류별 MessageConverter에서 변환이 이뤄진다.
	// MappingJacksonHttpMessageConverter 를 사용하면 request, response 를 JSON 으로 변환
	// view (~.jsp) 가 아닌 Data 자체를 전달하기위한 용도
	// @JsonIgnore : VO 에 적용하면 변환에서 제외

	// 3) jsonView
	// => Spring 에서 MappingJackson2JsonView를 사용해서
	// ModelAndView를 json 형식으로 반환해 준다.
	// => 방법
	// -> pom dependency추가 , 설정화일 xml 에 bean 등록
	// -> return할 ModelAndView 생성시 View를 "jsonView"로 설정

	// ** Json Login Test	
	// => viewName 을 "jsonView"	로
	// => addObject
//		-> 성공 : loginSuccess = 'T'
//		-> 실패 : loginSuccess = 'F' , 실패 message
	
	@RequestMapping(value = "/jslogin")
	public ModelAndView jslogin(HttpServletRequest request, HttpServletResponse response, ModelAndView mv, MemberVO vo) {
		
		// ** jsonView 사용시 response 의 한글 처리
		response.setContentType("text/html; charset=UTF-8");
		
		// 1) request 처리
		String id = vo.getId();
		String password = vo.getPassword();
		
		// 2) service 처리
		vo = service.selectOne(vo);
		if ( vo != null ) { 
			// ID 는 일치 -> Password 확인
			if ( vo.getPassword().equals(password) ) {
				// Login 성공 -> login 정보 session에 보관, home (새로고침) 
				mv.addObject("loginSuccess", "T");
				request.getSession().setAttribute("loginID", id);
				request.getSession().setAttribute("loginName", vo.getName());
			}else {
				// Password 오류 -> 재로그인 유도 (loginForm 으로)
				mv.addObject("loginSuccess", "F");
				mv.addObject("message", "~~ Password 오류,  다시 하세요 ~~");
			}
		}else {	// ID 오류 -> 재로그인 유도 (loginForm 으로)
			mv.addObject("loginSuccess", "F");
			mv.addObject("message", "~~ ID 오류,  다시 하세요 ~~");
		} //else
		
		mv.setViewName("jsonView");
		// => /WEB-INF/views/jsonView.jsp -> 안되도록 servlet-context.xml 설정 
		return mv;
	} //jslogin
	
	// ** Member PageList 2. 
	@RequestMapping(value = "/mcplist")
	// ** ver01 : Criteria PageList
	//public ModelAndView mcplist(ModelAndView mv, Criteria cri, PageMaker pageMaker) {
	// ** ver02 : SearchCriteria PageList
	public ModelAndView mcplist(ModelAndView mv, SearchCriteria cri, PageMaker pageMaker) {	
		// 1) Criteria 처리 
		// => setCurrPage, setRowsPerPage 는 Parameter 로 전달되어,
		//    setCurrPage(..) , setRowsPerPage(..) 는 자동처리됨(스프링에 의해)
		//    -> cri.setCurrPage(Integer.parseInt(request.getParameter("currPage")))
		// => 그러므로 currPage 이용해서 sno, eno 계산만 하면됨
		cri.setSnoEno();
		
		// 2) 서비스처리
		// => List 처리, (totalRowCount 는 PageMaker 처리에서) 
		// ** ver01
		// mv.addObject("banana", service.criPList(cri)); 
		// ** ver02 : searchType, keyword 에 따른 조건검색
		// => service 에 메서드 추가 searchList(cri) , searchRowsCount(cri) 
		mv.addObject("banana", service.searchList(cri));
		
		// 3) PageMaker 처리
		pageMaker.setCri(cri);
		// ** ver01
		//pageMaker.setTotalRowCount(service.totalRowCount()); 
		// ** ver02
		pageMaker.setTotalRowCount(service.searchRowsCount(cri));
		
		mv.addObject("pageMaker", pageMaker);
		mv.setViewName("member/mCriList");
		return mv;
	} //mcplist
	
	// ** Member PageList 1.
	@RequestMapping(value = "/mpagelist")
	public ModelAndView mpagelist(ModelAndView mv, PageVO<MemberVO> pvo) {
		// 1) Paging 준비
		int currPage = 1;
		if (pvo.getCurrPage() > 1) currPage = pvo.getCurrPage();
		else pvo.setCurrPage(currPage) ;
		
		int sno = (currPage-1)*pvo.getRowsPerPage() + 1 ;
		int eno = sno + pvo.getRowsPerPage() - 1 ;
		pvo.setSno(sno);
		pvo.setEno(eno);
		
		// 2) Service 처리
		pvo = service.pageList(pvo) ;
		int totalPageNo = pvo.getTotalRowCount()/pvo.getRowsPerPage();
		// 20/3 -> 6 나머지 2 : 6 page 와 2개 -> 7page
		if ( pvo.getTotalRowCount()%pvo.getRowsPerPage() !=0 )
			totalPageNo +=1;
		
		// 3) View 처리
		// ** view02 : 추가 
		int sPageNo = ((currPage-1)/pvo.getPageNoCount())*pvo.getPageNoCount() + 1 ;
		int ePageNo = sPageNo + pvo.getPageNoCount() - 1 ;
		if ( ePageNo > totalPageNo ) ePageNo = totalPageNo ;
		
		mv.addObject("sPageNo", sPageNo);
		mv.addObject("ePageNo", ePageNo);
		mv.addObject("pageNoCount", pvo.getPageNoCount());
		
		// ** view01
		mv.addObject("currPage",currPage);
		mv.addObject("totalPageNo",totalPageNo);
		mv.addObject("banana", pvo.getList());
		
		mv.setViewName("member/pageMList");
		return mv;
	}//mpagelist
	
	// ** Test2) mv.setViewName("..")생략
	// => View 를 지정하지 않은경우 요청명.jsp 를 찾는다
	//	  단, 폴더위치를 지정하려면 요청명도 동일한 규칙으로 계층적으로 설계한다. (member/memberList2)
	// => 아래 "/loginFormTest" 의 경우처럼 굳이 view 에 전달할 정보가 없다면
	//    setViewName 생략하고 return void 가능함.
	@RequestMapping(value = "/memberList2")
	public ModelAndView mlist(ModelAndView mv)
			throws ServletException, IOException {
		// MemberList
		
		List<MemberVO> list = service.selectList();
    	if ( list!=null )mv.addObject("banana",list); 
    	else mv.addObject("message", "~~ 출력 자료가 없습니다 ~~");  
		return mv ;
	}//list2
	
	@RequestMapping(value = "/loginFormTest")
	public void loginFormTest() {
		
	}//loginFormTest
	
	
} //class
